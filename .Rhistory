library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "song_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
#print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
tsfi <- ggplot(importance_df) +
aes(x = IncNodePurity, y= Attribute,
text = paste("Feature Importance:", IncNodePurity)) +
geom_col() +
labs(x = "Value of Feature Importance for Total Streams")
tsfi <- ggplotly(tsfi, tooltip = "text")
tsfi
#| out.width: "90%"
#| label: fig-corrst
#| fig-cap: Correlation Matrix Between Change in Rank, Peak Rank, Weeks on Chart and Attributes
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "change_rank", "peak_rank", "weeks_on_chart")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(song_total_streams, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
global <- subset(global, select = -c(track_name))
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("song_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "song_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("song_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
#glimpse(importance_df)
View(correlation_matrix)
#| out.width: "90%"
#| label: fig-corrlt
#| fig-cap: Correlation Matrix Between Total Streams and Attributes
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "song_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
print(correlation_matrix)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(change_rank, peak_rank, weeks_on_chart, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("change_rank, peak_rank, weeks_on_chart")
change <- subset(global, select = -c(track_name, peak_rank, weeks_on_chart))
# Prepare predictors (independent variables)
change_predictors <- setdiff(names(change), "change_rank")
# Train a Random Forest model for each target variable and plot feature importance
change_rf_model <- randomForest(as.formula(paste("change_rank", "~",
paste(change_predictors, collapse = " + "))), data = change)
# Print feature importance
#print(importance(rf_model))
change_importance_df <- as.data.frame(importance(change_rf_model))
change_importance_df$Attribute <- rownames(change_importance_df) # Make a new column using the row names
peak <- subset(global, select = -c(track_name, change_rank, weeks_on_chart))
peak_predictors <- setdiff(names(change), "peak_rank")
# Train a Random Forest model for each target variable and plot feature importance
peak_rf_model <- randomForest(as.formula(paste("peak_rank", "~",
paste(peak_predictors, collapse = " + "))), data = peak)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(change_rank, peak_rank, weeks_on_chart, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("change_rank, peak_rank, weeks_on_chart")
change <- subset(global, select = -c(track_name, peak_rank, weeks_on_chart))
# Prepare predictors (independent variables)
change_predictors <- setdiff(names(change), "change_rank")
# Train a Random Forest model for each target variable and plot feature importance
change_rf_model <- randomForest(as.formula(paste("change_rank", "~",
paste(change_predictors, collapse = " + "))), data = change)
# Print feature importance
#print(importance(rf_model))
change_importance_df <- as.data.frame(importance(change_rf_model))
change_importance_df$Attribute <- rownames(change_importance_df) # Make a new column using the row names
peak <- subset(global, select = -c(track_name, change_rank, weeks_on_chart))
peak_predictors <- setdiff(names(peak), "peak_rank")
# Train a Random Forest model for each target variable and plot feature importance
peak_rf_model <- randomForest(as.formula(paste("peak_rank", "~",
paste(peak_predictors, collapse = " + "))), data = peak)
# Print feature importance
#print(importance(rf_model))
peak_importance_df <- as.data.frame(importance(peak_rf_model))
peak_importance_df$Attribute <- rownames(peak_importance_df) # Make a new column using the row names
#glimpse(importance_df)
library(ggplot2)
library(dplyr)
library(plotly)
# Assuming change_importance_df and peak_importance_df have a similar structure
# Combine the two data frames
combined_df <- bind_rows(
mutate(change_importance_df, Category = "Change"),
mutate(peak_importance_df, Category = "Peak")
)
# Create a clustered horizontal bar chart
cfi <- ggplot(combined_df) +
aes(x = Attribute, y = IncNodePurity, fill = Category,
text = paste("Feature Importance:", IncNodePurity)) +
geom_col(position = "dodge") +
labs(y = "Value of Feature Importance for Total Streams")
# Convert to plotly
cfi <- ggplotly(cfi, tooltip = "text")
# Show the plot
cfi
print(change_importance_df)
print(correlation_matrix)
#| out.width: "90%"
#| label: fig-corrst
#| fig-cap: Correlation Matrix Between Change in Rank, Peak Rank, Weeks on Chart and Attributes
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "change_rank", "peak_rank", "weeks_on_chart")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
print(correlation_matrix)
print(peak_importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(change_rank, peak_rank, weeks_on_chart, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("change_rank, peak_rank, weeks_on_chart")
change <- subset(global, select = -c(track_name, peak_rank, weeks_on_chart))
# Prepare predictors (independent variables)
change_predictors <- setdiff(names(change), "change_rank")
# Train a Random Forest model for each target variable and plot feature importance
change_rf_model <- randomForest(as.formula(paste("change_rank", "~",
paste(change_predictors, collapse = " + "))), data = change)
# Print feature importance
#print(importance(rf_model))
change_importance_df <- as.data.frame(importance(change_rf_model))
change_importance_df$Attribute <- rownames(change_importance_df) # Make a new column using the row names
peak <- subset(global, select = -c(track_name, change_rank, weeks_on_chart))
peak_predictors <- setdiff(names(peak), "peak_rank")
# Train a Random Forest model for each target variable and plot feature importance
peak_rf_model <- randomForest(as.formula(paste("peak_rank", "~",
paste(peak_predictors, collapse = " + "))), data = peak)
# Print feature importance
#print(importance(rf_model))
peak_importance_df <- as.data.frame(importance(peak_rf_model))
peak_importance_df$Attribute <- rownames(peak_importance_df) # Make a new column using the row names
week <- subset(global, select = -c(track_name, change_rank, peak_rank))
week_predictors <- setdiff(names(week), "weeks_on_chart")
# Train a Random Forest model for each target variable and plot feature importance
week_rf_model <- randomForest(as.formula(paste("weeks_on_chart", "~",
paste(week_predictors, collapse = " + "))), data = week)
# Print feature importance
#print(importance(rf_model))
week_importance_df <- as.data.frame(importance(week_rf_model))
week_importance_df$Attribute <- rownames(week_importance_df) # Make a new column using the row names
print(week_importance_df)
print(correlation_matrix)
