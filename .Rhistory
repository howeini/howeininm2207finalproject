select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- plot_ly(data = track_attribute2, labels = ~mode_word, values = ~..count.., type = 'pie') %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE)
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- track_attribute2 %>%
count(mode_word) %>%
plot_ly(labels = ~mode_word, values = ~n, type = 'pie') %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE)
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- track_attribute2 %>%
count(mode_word) %>%
plot_ly(labels = ~mode_word, values = ~n, type = 'pie',
colors = c('grey', 'lightgreen')) %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE)
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- track_attribute2 %>%
count(mode_word) %>%
plot_ly(labels = ~mode_word, values = ~n, type = 'pie') %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE) %>%
add_trace(marker = list(colors = c('grey', 'lightgreen')))
mb
runApp('AttributeDist.ShinyApp')
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
library(plotly)
ltpop <- spotify %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(ltpop[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
library(plotly)
ltpop <- spotify %>%
group_by(track_name) %>%
mutate(song_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(ltpop[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "song_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
View(ltpop)
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
View(ltpop)
View(global)
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
View(correlation_matrix)
library(plotly)
global2 <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix2 <- cor(global2[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix2),
y = colnames(correlation_matrix2),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
everything <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Load library
library(tidyverse)
library(ggplot2)
library(ggiraph) # To make ggplot2 interactive
library(plotly)
library(forcats)
library(scales)
library(svglite) # For ggplot Carousel
library(slickR) # For ggplot Carousel
# Read CSV file
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
# Remove unnecessary columns
spotify <- subset(raw, select = -c(X_1, artists_num, collab, album_num_tracks, pivot))
#| out.width: "90%"
#| label: fig-top10artist
#| fig-cap: Top 10 Spotify Artists in January 2022
# Manipulate data set to obtain top 10 tracks from the "Global" charts
globaltop10artists <- spotify %>%
filter(country == "Global") %>%
group_by(artist_individual) %>%
mutate(artist_total_streams = sum(streams)) %>%
distinct(artist_individual, .keep_all = TRUE) %>%
select(artist_individual, artist_id, artist_img, artist_total_streams, artist_genre) %>%
arrange(desc(artist_total_streams)) %>%
head(globaltop10artists, n=10)
# Create Top 10 Artist plotly graph
fig_globaltop10artists <- ggplot(globaltop10artists,
aes(x = artist_total_streams,
y = fct_reorder(artist_individual, artist_total_streams),
customdata = artist_id,
text = paste("</br>Total Streams:", artist_total_streams,
"</br>Artist Link: <a href=", artist_id,
" target='_blank'>", artist_id, "</a>",
"</br>Artist Genre:", artist_genre))) +
geom_col() +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 8)) +
labs(x="Total Streams", title = "Top 10 Spotify Artists")
fig_globaltop10artists <- ggplotly(fig_globaltop10artists, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white",
bordercolor = "black",
align = "left",
persistent = TRUE),
hovertemplate = "%{text}<extra></extra>") %>%
layout(title = list(text = "Top 10 Spotify Artists", x = 0.5, y = 0.95, xanchor = "center", yanchor = "top"))
fig_globaltop10artists
#| out.width: "90%"
#| label: fig-top10artistwc
#| fig-cap: Genres of the Top 10 Spotify Artists
# Create a new data frame with unique words in artist genre and their frequencies
genre_frequency_df <- globaltop10artists %>%
separate_rows(artist_genre, sep = " ") %>%
group_by(word = tolower(artist_genre)) %>%
summarise(frequency = n())
# Print the new data frame
#print(word_frequency_df)
# library
library(wordcloud2)
# have a look to the example dataset
# head(demoFreq)
# Basic plot
genre_wc <- wordcloud2(data=genre_frequency_df, size=1,
fontFamily = "Verdana", fontWeight = "bold",
color=rep_len(c("lightgreen","grey"), nrow(genre_frequency_df)),
shape = "circle")
genre_wc
#| out.width: "90%"
#| label: fig-top10songs
#| fig-cap: Top 10 Spotify Songs in January 2022
# Manipulate data set to obtain top 10 tracks from the "Global" charts
globaltop10tracks <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(uri, track_name, artist_names, album_cover, track_total_streams) %>%
arrange(desc(track_total_streams)) %>%
head(globaltop10tracks, n=10)
# Create Top 10 Tracks plotly graph
fig_globaltop10tracks <- ggplot(globaltop10tracks,
aes(x = track_total_streams,
y = fct_reorder(track_name, track_total_streams),
customdata = uri,
text = paste("</br>Total Streams:", track_total_streams,
"</br>Artists:", str_wrap(artist_names, width = 50),
"</br>Track Link: <a href=", uri,
" target='_blank'>", uri, "</a>"))) +
geom_col() +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 8)) +
labs(x="Total Streams", title = "Top 10 Spotify Songs")
fig_globaltop10tracks <- ggplotly(fig_globaltop10tracks, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white",
bordercolor = "black",
align = "left",
persistent = TRUE),
hovertemplate = "%{text}<extra></extra>") %>%
layout(title = list(text = "Top 10 Spotify Songs", x = 0.5, y = 0.95, xanchor = "center", yanchor = "top"))
fig_globaltop10tracks
library(plotly)
everything <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(everything[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
# NEED TO ADD NEW COLUMN CALCULATING RANK-PREVRANK
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "rank", "peak_rank", "weeks_on_chart")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global2 <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix2 <- cor(global2[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix2),
y = colnames(correlation_matrix2),
z = correlation_matrix2,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
View(correlation_matrix)
View(correlation_matrix2)
View(global2)
library(plotly)
library(corrplot)
global2 <- spotify %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix2 <- cor(global2[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix2),
y = colnames(correlation_matrix2),
z = correlation_matrix2,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
