# To map our data, we need to merge the childlessness, gender gap index and world map data. As said before,
# these all have different notations for country names, which is why we'll use the ISO3 codes. However,
# even between the ISO code data and the other data sets, there is discrepancy in country names.
# Unfortunately, to solve this, we need to manually change some country names in our data to match those in
# the ISO code data set.
old_names <- c("Bolivia (Plurinational State of)", "Cabo Verde", "China, Hong Kong Special Administrative Region",
"China, Macao Special Administrative Region", "Congo", "Democratic People's Republic of Korea",
"Democratic Republic of the Congo", "Iran (Islamic Republic of)", "Lao People's Democratic Republic",
"Micronesia (Federated States of)", "Republic of Korea", "Republic of Moldova", "Saint Vincent and the Grenadines",
"State of Palestine", "Syrian Arab Republic", "The former Yugoslav Republic of Macedonia",
"United Kingdom of Great Britain and Northern Ireland", "United Republic of Tanzania",
"United States Virgin Islands", "Venezuela (Bolivarian Republic of)")
new_names <- c("Bolivia", "Cape Verde", "Hong Kong, SAR China", "Macao, SAR China", "Congo (Brazzaville)",
"Korea (North)", "Congo, (Kinshasa)", "Iran, Islamic Republic of", "Lao PDR", "Micronesia, Federated States of",
"Korea (South)", "Moldova", "Saint Vincent and Grenadines", "Palestinian Territory", "Syrian Arab Republic (Syria)",
"Macedonia, Republic of", "United Kingdom", "Tanzania, United Republic of", "Virgin Islands, US", "Venezuela (Bolivarian Republic)")
for (i in 1:length(old_names)){
childlessness_data$Country[childlessness_data$Country == old_names[i]] <- new_names[i]
}
old_names <- c("French Southern and Antarctic Lands", "Antigua", "Barbuda", "Saint Barthelemy", "Brunei", "Ivory Coast",
"Democratic Republic of the Congo", "Republic of Congo", "Falkland Islands", "Micronesia", "UK",
"Heard Island", "Cocos Islands", "Iran", "Nevis", "Saint Kitts", "South Korea", "Laos", "Saint Martin",
"Macedonia", "Pitcairn Islands", "North Korea", "Palestine", "Russia", "South Sandwich Islands",
"South Georgia", "Syria", "Trinidad", "Tobago", "Taiwan", "Tanzania", "USA", "Vatican", "Grenadines",
"Saint Vincent", "Venezuela", "Vietnam", "Wallis and Fortuna")
new_names <- c("French Southern Territories", rep("Antigua and Barbuda", 2), "Saint-Barthélemy",
"Brunei Darussalam", "Côte d'Ivoire", "Congo, (Kinshasa)", "Congo (Brazzaville)",
"Falkland Islands (Malvinas)", "Micronesia, Federated States of", "United Kingdom",
"Heard and Mcdonald Islands", "Cocos (Keeling) Islands", "Iran, Islamic Republic of",
rep("Saint Kitts and Nevis", 2), "Korea (South)", "Lao PDR", "Saint-Martin (French part)",
"Macedonia, Republic of", "Pitcairn", "Korea (North)", "Palestinian Territory", "Russian Federation",
rep("South Georgia and the South Sandwich Islands", 2),
"Syrian Arab Republic (Syria)", rep("Trinidad and Tobago", 2), "Taiwan, Republic of China",
"Tanzania, United Republic of", "United States of America", "Holy See (Vatican City State)",
rep("Saint Vincent and Grenadines", 2), "Venezuela (Bolivarian Republic)", "Viet Nam", "Wallis and Futuna Islands")
for (i in 1:length(old_names)){
world_data$region[world_data$region == old_names[i]] <- new_names[i]
}
# Now the name changes for countries have been made, we can add the ISO3 codes to our childlessness and world
# map data. The gender gap index data already contain these codes, so there's no need for us to add these there.
childlessness_data['ISO3'] <- iso_codes$ISO3[match(childlessness_data$Country, iso_codes$Country)]
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$Country)]
# Next, we melt the childlessness and gender gap index data into long format such that they will have similar
# shape and column names for merging. The *melt()* function is included in package *reshape2*. The goal here
# is to create variables that have different unique values for the different data, such that I can show you
# how to adapt the R Shiny app input to the users' choices. For example, we'll create a *DataType* column that
# has value *Childlessness* for the rows of the childlessness data and value *Gender Gap Index* for all rows
# of the gender gap index data. We'll also create a column *Period* that contains earlier, middle and later
# periods for the childlessness data and different years for the gender gap index data. As such, when the
# user chooses to explore the childlessness data, the input for the period will only contain the choices
# relevant to the childlessness data (i.e. earlier, middle and later periods and no years). When the user
# chooses to explore the gender gap index data, they will only see different years as choices for the input
# of the period, and not earlier, middle and later periods. The same goes for the *Indicator* column. This
# may sound slightly vague at this point, but we'll see this in practice later on when building the R Shiny app.
library(reshape2)
childlessness_melt <- melt(childlessness_data, id = c("Country", "ISO3", "Period"),
variable.name = "Indicator", value.name = "Value")
childlessness_melt$Value <- as.numeric(childlessness_melt$Value)
# After melting the data and ensuring they're in the same format, we merge them together using the *rbind()*
# function, which we can do here because the data have the same colum names.
childlessness_melt["DataType"] <- rep("Childlessness", nrow(childlessness_melt))
gender_index_melt["DataType"] <- rep("Gender Gap Index", nrow(gender_index_melt))
df <- rbind(childlessness_melt, gender_index_melt)
df[] <- lapply(df, as.character)
df$Value <- as.numeric(df$Value)
View(df)
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("here")
runApp('~/Desktop/NUS/NM2207/Week 8/App')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Load library
library(tidyverse)
library(ggplot2)
library(ggiraph) # To make ggplot2 interactive
library(plotly)
library(forcats)
library(scales)
library(svglite) # For ggplot Carousel
library(slickR) # For ggplot Carousel
# Read CSV file
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
# Remove unnecessary columns
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
#| out.width: "90%"
#| label: fig-top10
#| fig-cap: Overall Top 10 Spotify Tracks and Artists in January 2022
# Manipulate data set to obtain top 10 tracks from the "Global" charts
globaltop10tracks <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(uri, track_name, artist_names, album_cover, track_total_streams) %>%
arrange(desc(track_total_streams)) %>%
head(globaltop10tracks, n=10)
globaltop10artists <- spotify %>%
filter(country == "Global") %>%
group_by(artist_individual) %>%
mutate(artist_total_streams = sum(streams)) %>%
distinct(artist_individual, .keep_all = TRUE) %>%
select(artist_individual, artist_id, artist_img, artist_total_streams) %>%
arrange(desc(artist_total_streams)) %>%
head(globaltop10artists, n=10)
# Create Top 10 Tracks plotly graph
fig_globaltop10tracks <- ggplot(globaltop10tracks,
aes(x = track_total_streams,
y = fct_reorder(track_name, track_total_streams),
customdata = uri,
text = paste("</br>Total Streams:", track_total_streams,
"</br>Artists:", str_wrap(artist_names, width = 50),
"</br>Track Link: <a href=", uri,
" target='_blank'>", uri, "</a>"))) +
geom_col() +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 8)) +
labs(x="Total Streams")
fig_globaltop10tracks <- ggplotly(fig_globaltop10tracks, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white",
bordercolor = "black",
align = "left",
persistent = TRUE),
hovertemplate = "%{text}<extra></extra>")
# Create Top 10 Artist plotly graph
fig_globaltop10artists <- ggplot(globaltop10artists,
aes(x = artist_total_streams,
y = fct_reorder(artist_individual, artist_total_streams),
customdata = artist_id,
text = paste("</br>Total Streams:",artist_total_streams,
"</br>Artist Link: <a href=", artist_id,
" target='_blank'>", artist_id, "</a>"))) +
geom_col() +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 8)) +
labs(x="Total Streams")
fig_globaltop10artists <- ggplotly(fig_globaltop10artists, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white",
bordercolor = "black",
align = "left",
persistent = TRUE),
hovertemplate = "%{text}<extra></extra>")
subplot(fig_globaltop10tracks, fig_globaltop10artists,
nrows = 2, widths = 1, margin =0.02,
shareX = TRUE) %>%
layout(title = 'Top 10 Tracks and Artists in January 2022', position = "top center")
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Viridis",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
# NEED TO ADD NEW COLUMN CALCULATING RANK-PREVRANK
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "rank", "peak_rank", "weeks_on_chart")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Viridis",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
runApp('~/Desktop/NUS/NM2207/Test App')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='howeini',
token='8F6BEED609FCDD754A39DD8D5F899D3F',
secret='ml2Z9lKLV/OZtl4jwUIFS2Vu4JSvWHFamVjmlXVv')
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
rsconnect::showLogs(appName="name_of_app",streaming=TRUE)
rsconnect::showLogs(appName="AttributeDist.ShinyApp",streaming=TRUE)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rsconnect::showLogs(appName="app.R",streaming=TRUE)
rsconnect::showLogs(appName="app.R",streaming=TRUE)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rsconnect::showLogs(appName="AttributeDist.ShinyApp",streaming=TRUE)
building: Pushing image: 9470419
?colorscale
??colorscale
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Inferno",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Inferno",
colorbar = list(title = "Log Correlation", tickvals = c(-1, 0, 1), ticktext = c("0.1", "1", "10")),
text = correlation_matrix,
hoverinfo = "text"
) %>% layout(yaxis = list(type = "category"))  # Specify y-axis as category for correct ordering of labels
# Apply log transformation to colorscale
heatmap$marker$colorbar$ticks = "outside"
heatmap$marker$colorbar$tickvals = c(-1, 0, 1)
heatmap$marker$colorbar$ticktext = c("0.1", "1", "10")
heatmap$marker$colorbar$title = "Log Correlation"
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Inferno",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "cividis",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Plasma",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Picnic",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Electric",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Electric",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Rainbow",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "track_total_streams")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
install.packages("DT")
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
View(df)
# Track ranked 1 in every country for every week
top_tracks <- spotify %>%
filter(rank == 1) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(uri, rank, track_name, artist_names, album_cover, week, country, region, language,
streams, danceability, energy, key, mode, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration) %>%
pivot_longer(cols = streams:duration,
names_to = "attribute",
values_to = "value")
top_tracks
```
g
# Make new data set for country map
```{r, eval=TRUE}
# Remove unnecessary columns
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
# Track ranked 1 in every country for every week
top_tracks <- spotify %>%
filter(rank == 1) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(uri, rank, track_name, artist_names, album_cover, week, country, region, language,
streams, danceability, energy, key, mode, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration) %>%
pivot_longer(cols = streams:duration,
names_to = "attribute",
values_to = "value")
top_tracks
```
shiny::runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
install.packages("girafe")
install.packages"girafe"
install.packages("girafe")
library(girafe)
shiny::runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
View(world_data)
View(world_data)
shiny::runApp('WorldMap.ShinyApp')
runApp('testapp.R')
?girafe_options
runApp('WorldMap.ShinyApp')
?opts_zoom
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
View(world_map)
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
?tooltip
??tooltip
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
shiny::runApp('WorldMap.ShinyApp')
demo("colors")
runApp('WorldMap.ShinyApp')
shiny::runApp('WorldMap.ShinyApp')
?brewer.pal
runApp('WorldMap.ShinyApp')
?opts_width
??opts_width
shiny::runApp('WorldMap.ShinyApp')
?theme
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams)) %>%
distinct(track_name, .keep_all = TRUE)
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("track_total_streams")
# Prepare predictors (independent variables)
predictors <- setdiff(names(global), "track_total_streams")
# Train a Random Forest model for each target variable and plot feature importance
rf_model <- randomForest(as.formula(paste("track_total_streams", "~",
paste(predictors, collapse = " + "))), data = global)
# Print feature importance
# print(importance(rf_model))
importance_df <- as.data.frame(importance(rf_model))
importance_df$Attribute <- rownames(importance_df) # Make a new column using the row names
glimpse(importance_df)
ggplot(importance_df) +
aes(x = IncNodePurity, y= Attribute) +
geom_col()
View(importance_df)
