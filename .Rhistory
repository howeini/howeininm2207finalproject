#print(importance(rf_model))
change_importance_df <- as.data.frame(importance(change_rf_model))
change_importance_df$Attribute <- rownames(change_importance_df) # Make a new column using the row names
peak <- subset(global, select = -c(track_name, change_rank, weeks_on_chart))
peak_predictors <- setdiff(names(change), "peak_rank")
# Train a Random Forest model for each target variable and plot feature importance
peak_rf_model <- randomForest(as.formula(paste("peak_rank", "~",
paste(peak_predictors, collapse = " + "))), data = peak)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(change_rank, peak_rank, weeks_on_chart, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("change_rank, peak_rank, weeks_on_chart")
change <- subset(global, select = -c(track_name, peak_rank, weeks_on_chart))
# Prepare predictors (independent variables)
change_predictors <- setdiff(names(change), "change_rank")
# Train a Random Forest model for each target variable and plot feature importance
change_rf_model <- randomForest(as.formula(paste("change_rank", "~",
paste(change_predictors, collapse = " + "))), data = change)
# Print feature importance
#print(importance(rf_model))
change_importance_df <- as.data.frame(importance(change_rf_model))
change_importance_df$Attribute <- rownames(change_importance_df) # Make a new column using the row names
peak <- subset(global, select = -c(track_name, change_rank, weeks_on_chart))
peak_predictors <- setdiff(names(peak), "peak_rank")
# Train a Random Forest model for each target variable and plot feature importance
peak_rf_model <- randomForest(as.formula(paste("peak_rank", "~",
paste(peak_predictors, collapse = " + "))), data = peak)
# Print feature importance
#print(importance(rf_model))
peak_importance_df <- as.data.frame(importance(peak_rf_model))
peak_importance_df$Attribute <- rownames(peak_importance_df) # Make a new column using the row names
#glimpse(importance_df)
library(ggplot2)
library(dplyr)
library(plotly)
# Assuming change_importance_df and peak_importance_df have a similar structure
# Combine the two data frames
combined_df <- bind_rows(
mutate(change_importance_df, Category = "Change"),
mutate(peak_importance_df, Category = "Peak")
)
# Create a clustered horizontal bar chart
cfi <- ggplot(combined_df) +
aes(x = Attribute, y = IncNodePurity, fill = Category,
text = paste("Feature Importance:", IncNodePurity)) +
geom_col(position = "dodge") +
labs(y = "Value of Feature Importance for Total Streams")
# Convert to plotly
cfi <- ggplotly(cfi, tooltip = "text")
# Show the plot
cfi
print(change_importance_df)
print(correlation_matrix)
#| out.width: "90%"
#| label: fig-corrst
#| fig-cap: Correlation Matrix Between Change in Rank, Peak Rank, Weeks on Chart and Attributes
library(plotly)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE)
# Compute the correlation matrix
correlation_matrix <- cor(global[, c("danceability", "energy", "key", "mode", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration", "change_rank", "peak_rank", "weeks_on_chart")])
# Create interactive heatmap using plot_ly
heatmap <- plot_ly(
x = colnames(correlation_matrix),
y = colnames(correlation_matrix),
z = correlation_matrix,
type = "heatmap",
colorscale = "Portland",
colorbar = list(title = "Correlation"),
text = correlation_matrix,
hoverinfo = "text"
)
# Show the interactive heatmap
heatmap
print(correlation_matrix)
print(peak_importance_df)
# Load required libraries
library(randomForest)
library(ggplot2)
global <- spotify %>%
filter(country == "Global") %>%
group_by(track_name) %>%
mutate(track_total_streams = sum(streams),
change_rank = rank - previous_rank) %>%
distinct(track_name, .keep_all = TRUE) %>%
select(change_rank, peak_rank, weeks_on_chart, track_name, danceability, energy, key, mode,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, duration)
# Assuming your_data is your dataset with appropriate columns and preprocessing done
# Assuming 'total_streams' and 'chart_rankings' are your target variables
target_variables <- c("change_rank, peak_rank, weeks_on_chart")
change <- subset(global, select = -c(track_name, peak_rank, weeks_on_chart))
# Prepare predictors (independent variables)
change_predictors <- setdiff(names(change), "change_rank")
# Train a Random Forest model for each target variable and plot feature importance
change_rf_model <- randomForest(as.formula(paste("change_rank", "~",
paste(change_predictors, collapse = " + "))), data = change)
# Print feature importance
#print(importance(rf_model))
change_importance_df <- as.data.frame(importance(change_rf_model))
change_importance_df$Attribute <- rownames(change_importance_df) # Make a new column using the row names
peak <- subset(global, select = -c(track_name, change_rank, weeks_on_chart))
peak_predictors <- setdiff(names(peak), "peak_rank")
# Train a Random Forest model for each target variable and plot feature importance
peak_rf_model <- randomForest(as.formula(paste("peak_rank", "~",
paste(peak_predictors, collapse = " + "))), data = peak)
# Print feature importance
#print(importance(rf_model))
peak_importance_df <- as.data.frame(importance(peak_rf_model))
peak_importance_df$Attribute <- rownames(peak_importance_df) # Make a new column using the row names
week <- subset(global, select = -c(track_name, change_rank, peak_rank))
week_predictors <- setdiff(names(week), "weeks_on_chart")
# Train a Random Forest model for each target variable and plot feature importance
week_rf_model <- randomForest(as.formula(paste("weeks_on_chart", "~",
paste(week_predictors, collapse = " + "))), data = week)
# Print feature importance
#print(importance(rf_model))
week_importance_df <- as.data.frame(importance(week_rf_model))
week_importance_df$Attribute <- rownames(week_importance_df) # Make a new column using the row names
print(week_importance_df)
print(correlation_matrix)
shiny::runApp('WorldMap.ShinyApp')
View(spotify)
print(unique(spotify$country))
world_data <- ggplot2::map_data('world')
head(world_data)
world_data <- fortify(world_data)
library(magrittr)
library(rvest)
library(countrycode)
library(readxl)
library(wbstats)
library(plyr)
library(dplyr)
library(maps)
library(ggplot2)
library(RColorBrewer)
library(ggiraph)
library(shiny)
library(tidyverse)
# Read CSV file
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
# Remove unnecessary columns
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
# Obtain ISO3 Codes
library(magrittr)
library(rvest)
library(countrycode)
iso_codes = countrycode::codelist[, c("un.name.en", "iso3c")]
names(iso_codes) = c("Country", "ISO3")
# Add ISO3 Column to spotify df
spotify['ISO3'] <- iso_codes$ISO3[match(spotify$country, iso_codes$Country)]
# top_tracks shows the track ranked #1 in every country for each of the 4 weeks in Jan
top_tracks <- spotify %>%
filter(rank == 1) %>%
select(track_name, artist_names, album_cover, ISO3, country, region, language, rank,  week, streams,
danceability, energy, key, mode, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration) %>%
arrange(week, country) %>%
pivot_longer(cols = streams:duration,
names_to = "attribute",
values_to = "value")
# Load World Data
library(maps)
library(ggplot2)
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
# Add ISO3 Column to world_data df
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$Country)]
worldMaps <- function(df, world_data, attribute, week){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[df$attribute == attribute & df$week == week,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['attribute'] <- rep(attribute, nrow(world_data))
world_data['week'] <- rep(week, nrow(world_data))
world_data['value'] <- plotdf$value[match(world_data$ISO3, plotdf$ISO3)]
world_data['track_name'] <- plotdf$track_name[match(world_data$ISO3, plotdf$ISO3)]
world_data['language'] <- plotdf$language[match(world_data$ISO3, plotdf$ISO3)]
world_data['artist_names'] <- plotdf$artist_names[match(world_data$ISO3, plotdf$ISO3)]
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'darkgrey', size = 0.1,
aes(x = long, y = lat, fill = value, group = group,
tooltip = paste("Country (Language):", region, "(",language,")",
"</br>Top Song:", track_name,
"</br>Artists:", artist_names,
"</br>Value of", attribute, ":", value))) +
scale_fill_gradientn(colours = brewer.pal(5, "Spectral"), na.value = 'white') +
labs(fill = attribute, color = attribute, title = NULL, x = NULL, y = NULL) +
my_theme()
return(g)
}
# Attribute descriptions data frame
attribute_descriptions <- data.frame(
attribute = c("danceability", "energy", "speechiness", "acousticness",
"instrumentalness", "liveness", "valence",
"key", "mode", "loudness", "tempo", "duration", "streams"),
description = c(
"How suitable a track is for dancing based on a combination of musical elements
including tempo, rhythm stability, beat strength, and overall regularity.",
"Represents a perceptual measure of intensity and activity.
Typically, energetic tracks feel fast, loud, and noisy.
For example, death metal has high energy, while a Bach prelude scores low on the scale.
Perceptual features contributing to this attribute include dynamic range, perceived loudness,
timbre, onset rate, and general entropy.",
"Speechiness detects the presence of spoken words in a track.
The more exclusively speech-like the recording (e.g. talk show, audio book, poetry),
the closer to 1.0 the attribute value.
Values above 0.66 describe tracks that are probably made entirely of spoken words.
Values between 0.33 and 0.66 describe tracks that may contain both music and speech,
either in sections or layered, including such cases as rap music.
Values below 0.33 most likely represent music and other non-speech-like tracks.",
"A confidence measure of whether the track is acoustic.
1.0 represents high confidence the track is acoustic.",
"Predicts whether a track contains no vocals.
'Ooh' and 'aah' sounds are treated as instrumental in this context.
Rap or spoken word tracks are clearly 'vocal'.
The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.
Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.",
"Detects the presence of an audience in the recording.
Higher liveness values represent an increased probability that the track was performed live.
A value above 0.8 provides strong likelihood that the track is live.",
"Describes the musical positiveness conveyed by a track.
Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric),
while tracks with low valence sound more negative (e.g. sad, depressed, angry)",
"The key the track is in. Integers map to pitches using standard Pitch Class notation.
E.g. 0 = C, 1 = C♯/D♭, 2 = D, 3 = D♯/E♭, 4 = E, 5 = F, 6 = F♯/G♭, 7 = G, 8 = G♯/A♭, 9 = A, 10 = A♯/B♭, 11 = B.
If no key was detected, the value is -1.",
"Mode indicates the modality (major or minor) of a track,
the type of scale from which its melodic content is derived.
Major is represented by 1 and minor is 0.",
"The overall loudness of a track in decibels (dB).
Loudness values are averaged across the entire track.
Values typically range between -60 and 0 db.
The more negative the value, the louder the song is.",
"The overall estimated tempo of a track in beats per minute (BPM).
In musical terminology, tempo is the speed or pace of a given piece.
It is derived directly from the average beat duration.",
"The duration of the track in milliseconds.",
"Total streams for the top song of a country on that day."
)
)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("World Map"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("week",
label = "Drag to select the week to be displayed",
min = min(unique(top_tracks$week)),
max = max(unique(top_tracks$week)),
value = min(unique(top_tracks$week)),
step = 7,
ticks = FALSE,
animate = animationOptions(interval = 8000, loop = TRUE)),
h6("Alternatively, click the Play button to loop the animation!"),
hr(),
selectInput("attribute",
label = "Select the attribute to be displayed",
choices = unique(top_tracks$attribute),
selected = "streams"),
tableOutput("description")
),
# Show a plot of the generated distribution
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
h6("Tip: Select the magnifying glass (middle option), and double click to zoom in!
When you're done examining, select the last option to reset your view."),
girafeOutput("distPlot", width = "600px", height = "400px")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
x <- ggiraph(code = print(worldMaps(top_tracks, world_data, input$attribute, input$week)))
x <- girafe_options(x, opts_zoom(min = 1, max = 20, duration = 1000),
opts_tooltip(css = "padding:10px;background-color:#333333;color:white;", opacity = 1))
})
output$description <- renderTable({
selected_attributes <- input$attribute
descriptions <- attribute_descriptions[attribute_descriptions$attribute %in% selected_attributes, ]
descriptions
},
striped = FALSE,  # Add striped rows
hover = TRUE,    # Highlight rows on hover
bordered = TRUE,  # Add borders to the table
spacing = "m",   # Set spacing between cells (options: "s", "xs", "m", "l")
width = "100%",  # Set table width
align = "c",     # Align cell content (options: "l" - left, "c" - center, "r" - right)
rownames = FALSE, # Show/hide row names
colnames = TRUE,  # Show/hide column names
digits = 2,       # Number of decimal places for numeric columns
na = "",          # String to display for missing values
quoted = FALSE    # Quote character for column names if TRUE
)
}
# Run the application
shinyApp(ui = ui, server = server)
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Select only the data that the user has selected to view
plotdf <- df[df$attribute == attribute & df$week == week,]
# Select only the data that the user has selected to view
plotdf <- df[df$attribute == attribute & df$week == week,]
# Select only the data that the user has selected to view
plotdf <- df[df$attribute == attribute & df$week == week]
View(world_data)
View(iso_codes)
View(spotify)
print(is.na(spotify$IS03))
print(is.na(spotify$ISO3))
country_with_na_iso3 <- spotify %>%
filter(is.na(ISO3)) %>%
select(country)
View(country_with_na_iso3)
print(unique(country_with_na_iso3$country))
# Obtain ISO3 Codes
# Create a data frame
iso_codes <- data.frame(
country = c("Argentina", "Australia", "Austria", "Belgium", "Bolivia", "Brazil", "Bulgaria", "Canada", "Chile",
"Colombia", "Costa Rica", "Cyprus", "Czech Republic", "Denmark", "Dominican Republic", "Ecuador", "Egypt",
"El Salvador", "Estonia", "Finland", "France", "Germany", "Global", "Greece", "Guatemala", "Honduras",
"Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ireland", "Israel", "Italy", "Japan", "Korea",
"Latvia", "Lithuania", "Luxembourg", "Malaysia", "Mexico", "Morocco", "Netherlands", "New Zealand",
"Nicaragua", "Norway", "Panama", "Paraguay", "Peru", "Poland", "Portugal", "Romania", "Saudi Arabia",
"Singapore", "Slovakia", "South Africa", "Spain", "Sweden", "Switzerland", "Taiwan", "Thailand", "Turkey",
"United Arab Emirates", "United Kingdom", "Ukraine", "Uruguay", "United States", "Vietnam", "Philippines"),
ISO3 = c("ARG", "AUS", "AUT", "BEL", "BOL", "BRA", "BGR", "CAN", "CHL", "COL", "CRI", "CYP", "CZE", "DNK", "DOM",
"ECU", "EGY", "SLV", "EST", "FIN", "FRA", "DEU", "Global", "GRC", "GTM", "HND", "HKG", "HUN", "ISL", "IND",
"IDN", "IRL", "ISR", "ITA", "JPN", "KOR", "LVA", "LTU", "LUX", "MYS", "MEX", "MAR", "NLD", "NZL", "NIC", "NOR",
"PAN", "PRY", "PER", "POL", "PRT", "ROU", "SAU", "SGP", "SVK", "ZAF", "ESP", "SWE", "CHE", "TWN", "THA", "TUR",
"ARE", "GBR", "UKR", "URY", "USA", "VNM", "PHL")
)
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
country_with_na_iso3 <- spotify %>%
+   filter(is.na(ISO3)) %>%
+   select(country)
# Add ISO3 Column to spotify df
spotify['ISO3'] <- iso_codes$ISO3[match(spotify$country, iso_codes$country)]
> print(unique(country_with_na_iso3$country))
is.na(spotify$ISO3)
sum(is.na(spotify$ISO3))
# Add ISO3 Column to world_data df
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$subregion, iso_codes$country)]
# Add ISO3 Column to world_data df
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
# Add ISO3 Column to world_data df
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
# Add ISO3 Column to world_data df
world_data["ISO3_reg"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
world_data["ISO3_subreg"] <- iso_codes$ISO3[match(world_data$subregion, iso_codes$country)]
# Add ISO3 Column to world_data df
world_data["ISO3_reg"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
world_data["ISO3_subreg"] <- iso_codes$ISO3[match(world_data$subregion, iso_codes$country)]
# Load World Data
library(maps)
library(ggplot2)
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
# Add ISO3 Column to world_data df
world_data["ISO3_reg"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
world_data["ISO3_subreg"] <- iso_codes$ISO3[match(world_data$subregion, iso_codes$country)]
world_data$ISO3 <- paste(world_data$ISO3_reg, world_data$ISO3_subreg)
world_data$ISO3 <- ifelse(!is.na(world_data$ISO3_subreg), world_data$ISO3_subreg, world_data$ISO3_reg)
)
# Obtain ISO3 Codes
# Create a data frame
iso_codes <- data.frame(
country = c("Argentina", "Australia", "Austria", "Belgium", "Bolivia", "Brazil", "Bulgaria", "Canada", "Chile",
"Colombia", "Costa Rica", "Cyprus", "Czech Republic", "Denmark", "Dominican Republic", "Ecuador", "Egypt",
"El Salvador", "Estonia", "Finland", "France", "Germany", "Greece", "Guatemala", "Honduras",
"Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ireland", "Israel", "Italy", "Japan", "Korea",
"Latvia", "Lithuania", "Luxembourg", "Malaysia", "Mexico", "Morocco", "Netherlands", "New Zealand",
"Nicaragua", "Norway", "Panama", "Paraguay", "Peru", "Poland", "Portugal", "Romania", "Saudi Arabia",
"Singapore", "Slovakia", "South Africa", "Spain", "Sweden", "Switzerland", "Taiwan", "Thailand", "Turkey",
"United Arab Emirates", "United Kingdom", "Ukraine", "Uruguay", "United States", "Vietnam", "Philippines",
"South Korea"),
ISO3 = c("ARG", "AUS", "AUT", "BEL", "BOL", "BRA", "BGR", "CAN", "CHL", "COL", "CRI", "CYP", "CZE", "DNK", "DOM",
"ECU", "EGY", "SLV", "EST", "FIN", "FRA", "DEU", "GRC", "GTM", "HND", "HKG", "HUN", "ISL", "IND",
"IDN", "IRL", "ISR", "ITA", "JPN", "KOR", "LVA", "LTU", "LUX", "MYS", "MEX", "MAR", "NLD", "NZL", "NIC", "NOR",
"PAN", "PRY", "PER", "POL", "PRT", "ROU", "SAU", "SGP", "SVK", "ZAF", "ESP", "SWE", "CHE", "TWN", "THA", "TUR",
"ARE", "GBR", "UKR", "URY", "USA", "VNM", "PHL",
"KOR")
)
# Add ISO3 Column to world_data df
world_data["ISO3_reg"] <- iso_codes$ISO3[match(world_data$region, iso_codes$country)]
world_data["ISO3_subreg"] <- iso_codes$ISO3[match(world_data$subregion, iso_codes$country)]
world_data$ISO3 <- ifelse(!is.na(world_data$ISO3_subreg), world_data$ISO3_subreg, world_data$ISO3_reg)
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
shiny::runApp('WorldMap.ShinyApp')
?sliderInput
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('WorldMap.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
?br()
runApp('AttributeDist.ShinyApp')
library(DT)
# Your table data
table_data <- data.frame(
Attribute = c("Acousticness", "Danceability", "Duration", "Energy", "Instrumentalness",
"Key", "Liveness", "Loudness", "Mode", "Speechiness", "Tempo", "Valence"),
Description = c("A confidence measure of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.",
"How suitable a track is for dancing based on a combination of musical elements...",
"The song duration in seconds.",
"Represents a perceptual measure of intensity and activity. Typically, energetic tracks...",
"Predicts whether a track contains no vocals. 'Ooh' and 'aah' sounds are treated as instrumental...",
"Represents what key the song is in.",
"Detects the presence of an audience in the recording. Higher liveness values represent...",
"The overall loudness of a track in decibels (dB). Loudness is the quality of a sound that is...",
"Indicates the modality (major or minor) of a song, the type of scale from which its melodic content is derived.",
"Detects the presence of spoken words in a track. The more exclusively speech-like the recording, the closer to 1.0...",
"The overall estimated tempo of a track in beats per minute (BPM).",
"Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive..." )
)
# Create DataTable
datatable(table_data, options = list(pageLength = 5), rownames = FALSE)
DT::datatable(mtcars, options = list(pageLength = 20))
install.packages("reactable")
library(reactable)
reactable(iris)
fig_globaltop10tracks
```
shiny::runApp('AttributeDist.ShinyApp')
update.packages(ask = FALSE, checkBuilt = TRUE)
Yes
update.packages(ask = FALSE, checkBuilt = TRUE)
runApp('AttributeDist.ShinyApp')
View(genre_frequency_df)
#| out.width: "90%"
#| label: fig-top10artist
#| fig-subcap:
#| - Top 10 Spotify Artists in January 2022
#| - Genres of the Top 10 Spotify Artists
#| layout-ncol: 2
# Manipulate data set to obtain top 10 tracks from the "Global" charts
globaltop10artists <- spotify %>%
filter(country == "Global") %>%
group_by(artist_individual) %>%
mutate(artist_total_streams = sum(streams)) %>%
distinct(artist_individual, .keep_all = TRUE) %>%
select(artist_individual, artist_id, artist_img, artist_total_streams, artist_genre) %>%
arrange(desc(artist_total_streams)) %>%
head(globaltop10artists, n=10)
View(top_tracks)
runApp('WorldMap.ShinyApp')
global_top_tracks <- top_tracks %>% filter(country == "Global")
View(global_top_tracks)
runApp('WorldMap.ShinyApp')
song_name <-  global_top_tracks %>%
filter(attribute == "streams") %>%
filter(week == "2022-01-06")
View(song_name)
song_name <-  global_top_tracks %>%
filter(attribute == "streams") %>%
filter(week == "2022-01-06") %>%
unique(track_name)
runApp('WorldMap.ShinyApp')
