hovertemplate = "%{text}<extra></extra>") %>%
layout(title = list(text = "Top 10 Spotify Artists", x = 0.5, y = 0.95, xanchor = "center", yanchor = "top"))
fig_globaltop10artists
??widgetsize
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
?runExample()
runExample()
runExample("06_tabsets")
runExample("07_widgets")
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
if (key == -1) {
return("NA")
}
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
View(track_attribute2)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
# Print the resulting data frame
print(track_attribute2)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
# Print the resulting data frame
#print(track_attribute2)
ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar()
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
# Print the resulting data frame
#print(track_attribute2)
ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
# Print the resulting data frame
#print(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
# Print the resulting data frame
#print(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Apply the function to create the "Key Alphabet" column
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
# Print the resulting data frame
#print(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(pitches[key + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$scale <- sapply(track_attribute2$mode, map_to_mode)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[key + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$scale <- sapply(track_attribute2$mode, map_to_mode)
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$scale <- sapply(track_attribute2$mode, map_to_mode)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[key + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[key + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
# Basic piechart
ggplot(track_attribute2, aes(x=scale, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
# Basic piechart
ggplot(track_attribute2, aes(x=mode_word)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- ggplot(track_attribute2, aes(x = mode_word)) +
geom_bar() +
labs(x= "Key", y="Count")
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- ggplot(track_attribute2, aes(x = "", fill = mode_word)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +  # Convert to pie chart
labs(fill = "Mode", title = "Pie Chart of Mode Distribution")
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- ggplot(track_attribute2, aes(x = "", fill = mode_word)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +  # Convert to pie chart
labs(fill = "Mode", title = "Pie Chart of Mode Distribution")
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- plot_ly(data = track_attribute2, labels = ~mode_word, values = ~..count.., type = 'pie') %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE)
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- track_attribute2 %>%
count(mode_word) %>%
plot_ly(labels = ~mode_word, values = ~n, type = 'pie') %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE)
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- track_attribute2 %>%
count(mode_word) %>%
plot_ly(labels = ~mode_word, values = ~n, type = 'pie',
colors = c('grey', 'lightgreen')) %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE)
mb
library(tidyverse)
raw <- read_csv("Jan2022_Spotify_Weekly_Top_200_Songs_Streaming_Data_by_country_view_view.csv")
spotify <- subset(raw, select = -c(X_1, artists_num, artist_genre, collab, album_num_tracks, pivot))
track_attribute2 <- spotify %>%
select(track_name, key, mode) %>%
distinct(track_name, .keep_all = TRUE)
# Function to map integers to pitch names
map_to_pitch <- function(key) {
pitches <- c("C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B")
return(pitches[key + 1])
}
# Function to map integers to pitch names
map_to_mode <- function(scale) {
modes <- c("Minor", "Major")
return(modes[scale + 1])
}
# Apply the function to create new columns
track_attribute2$key_alphabet <- sapply(track_attribute2$key, map_to_pitch)
track_attribute2$mode_word <- sapply(track_attribute2$mode, map_to_mode)
track_attribute2 <- na.omit(track_attribute2)
kb <- ggplot(track_attribute2, aes(x = key_alphabet)) +
geom_bar() +
labs(x= "Key", y="Count") +
theme(axis.text.x = element_text(family = "Arial Unicode MS"))
kb <- ggplotly(kb, tooltip = "y")
kb
mb <- track_attribute2 %>%
count(mode_word) %>%
plot_ly(labels = ~mode_word, values = ~n, type = 'pie') %>%
layout(title = "Pie Chart of Mode Distribution", showlegend = TRUE) %>%
add_trace(marker = list(colors = c('grey', 'lightgreen')))
mb
runApp('AttributeDist.ShinyApp')
shiny::runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
runApp('AttributeDist.ShinyApp')
